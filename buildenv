#!/usr/bin/env python

"""
This script is meant to check my home directory to ensure that all the various
symlinks that make up my environment are there.  Its purpose is to sort of
"audit" a given system to ensure everything is setup the way it should be.

Note that the convention I use is that the symlink is the same name as the
file in this repository, but with a "." prepended.  And the symlinks are
relative

i.e. ${HOME}/.bashrc -> ${ENV_ROOT}/dotfiles/bashrc
"""

import shutil
import os
import sys
import re
import urllib.request
import subprocess

from optparse import OptionParser



class BuildEnv:

    LINK_T = 0
    DIR_T = 1
    DOWNLOAD_T = 2
    EXECUTE_T = 3

    def __init__( self,
        data,
        replace = dict(),
        update = False,
        home = os.environ['HOME']):

        self.update = update
        self.data = data
        self.replace = replace
        self.home = home if home.endswith('/') else home + '/'

        self.dispatch = {
            self.LINK_T: BuildEnv._create_symlink,
            self.DIR_T: BuildEnv._create_dir,
            self.DOWNLOAD_T: BuildEnv._download_file,
            self.EXECUTE_T: BuildEnv._execute,
        }

        os.chdir(home)

    def build(self):
        for tmp in self.data:
            action_type = tmp[0]
            args = list()
            # FIXME: make recursive
            for arg in tmp[1:]:
                if hasattr(arg, 'format'):
                    args.append(arg.format(**self.replace))
                elif isinstance(arg, list):
                    for i, subarg in enumerate(arg):
                        if hasattr(subarg, 'format'):
                            arg[i] = arg[i].format(**self.replace)
                    args.append(arg)
                else:
                    args.append(arg)

            self.dispatch[action_type](self, *args)

    def _create_dir( self, src, mode):
        if os.path.isdir(src):
            if self.update:
                os.chmod(src, mode)
        else:
            if self.update:
                print("Creating dir {0}".format(src))
                os.makedirs(src, int(mode))
            else:
                print("Directory {0} is missing".format(src))

    def _create_symlink( self, src, target):
        full_target = os.path.join(self.home, target)
        if os.path.isdir(full_target) and not os.path.islink(full_target):
            shutil.rmtree(full_target,)
        if os.path.isfile(full_target) and not os.path.islink(full_target):
            os.unlink(full_target)
        if os.path.islink(full_target):
            actual_src = os.readlink(os.path.join(self.home, target))
            if actual_src != src:
                print("Symlink incorrect: {0} -> {1}, should be: {2}".format(
                        target,
                        actual_src,
                        src))
                if self.update:
                    print("Fixing ... {0} -> {1}".format(target, src))
                    os.unlink(target)
                    os.symlink(src, target)
        else:
            if self.update:
                print("Creating ... {0} -> {1}".format(target, src))
                os.symlink(src, target)
            else:
                print("{0} symlink does not exist: {1}".format(src, target))

    def _download_file(self, file, url):

        full_dir = os.path.join(self.home, os.path.dirname(file))
        full_file = os.path.join(self.home, file)
        os.makedirs(full_dir, exist_ok=True)
        if self.update:
            print("Creating ... {0} -> {1}".format(url, full_file))
            with urllib.request.urlopen(url) as rfh:
                if os.path.exists(full_file):
                    os.unlink(full_file)
                with open(full_file, 'w+') as lfh:
                    lfh.write(rfh.read().decode('utf-8'))
        else:
            if not os.path.exists(full_file):
                print("Missing ... {0} -> {1}".format(url, full_file))

    def _execute(self, command):
        if self.update:
            print("Executing ... {0}".format(' '.join(command)))
            subprocess.call(command)
        else:
            print("Would execute ... {0}".format(' '.join(command)))



if __name__ == "__main__":
    PARGS = OptionParser()

    PARGS.add_option("-u", "--update", dest="update",
                 action="store_true", help="Update symlinks")

    PARGS.add_option("-e", "--env_root", dest="env_root",
                 default = os.getenv('ENV_ROOT', os.getcwd()),
                 help="Update symlinks")

    (OPTS, ARGS) = PARGS.parse_args()

    DATA = (
        # type src   target
        (BuildEnv.LINK_T, "{env}/dotfiles", ".dotfiles"),
        (BuildEnv.LINK_T, "{env}/vim", ".vim"),
        (BuildEnv.LINK_T, "{env}/sbin", "sbin"),
        (BuildEnv.LINK_T, "{env}/terminfo", ".terminfo"),
        (BuildEnv.LINK_T, "{env}/dotfiles/zsh", ".zsh"),
        (BuildEnv.LINK_T, "{env}/dotfiles/powerline", ".config/powerline"),
        (BuildEnv.LINK_T, "{env}/dotfiles/zshrc", ".zshrc"),
        (BuildEnv.LINK_T, "{env}/dotfiles/muttrc", ".muttrc"),
        (BuildEnv.LINK_T, "{env}/dotfiles/tmux.conf", ".tmux.conf"),
        (BuildEnv.LINK_T, "{env}/dotfiles/pylintrc", ".pylintrc"),
        (BuildEnv.LINK_T, "{env}/dotfiles/mypy", ".config/mypy"),
        (BuildEnv.LINK_T, "{env}/vim/vimrc", ".vimrc"),
        (BuildEnv.DIR_T, "{local_home}/vim", 0o700),
        (BuildEnv.DIR_T, "{local_home}/vim/swap", 0o700),
        (BuildEnv.DIR_T, "{local_home}/vim/backup", 0o700),
        (BuildEnv.DIR_T, "{remote_home}/zsh/history", 0o700),
        (BuildEnv.DOWNLOAD_T, ".vim/autoload/plug.vim", "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"),
        (BuildEnv.EXECUTE_T, ["{env}/submodules/powerline/fonts/install.sh"]),
        (BuildEnv.EXECUTE_T, ["vim", "+PlugInstall", "+qall", "+silent!"]),
    )

    REPLACE = {
        'env': OPTS.env_root,
        'dotfiles': os.path.join(OPTS.env_root, 'dotfiles'),
        'vim': os.path.join(OPTS.env_root, 'vim'),
        'local_home':  "/var/tmp/.cmajoros_env",
        'remote_home': "/home/cmajoros/.env"
    }

    ENV = BuildEnv(DATA, REPLACE, update = OPTS.update)
    ENV.build()

